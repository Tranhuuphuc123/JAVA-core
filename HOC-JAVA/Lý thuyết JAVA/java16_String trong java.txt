**************** TIỀM HIỂU VỀ STRING VÀ ARRAYLIST TRONG JAVA *********************************
>>>>> Khái niệm bề String:
 ## Khái niệm: hàm chuỗi ký tự đc xây dựng và cấp bộ nhớ động để lưu trữ các chuỗi ký tự trong java.
 ## Cấu trúc xấy dựng hàm String:
    1/ chuỗi chữ
        String abc = " nội dung gì đó"
    2/ kiểu khai báo với new
         String abc = new String(" nội dung gì đó);

## tính chất: chuỗi trong java có giá trị bất biến:
   + vd:
       
        String abc = "nội dung 1";
        abc.concat(" nội dung 2);
        System.out.println(abc) ;

    ====> lúc này do nó có t/c bất biến nên nội dung đc in ra là nội dung 1
    <=> tuy nhiên nếu ta tham chiếu đối tượng biến rõ ràng thì nó sẽ tham chiếu đến đối tượng biến vừa tạo thêm đó

        String abc = "nội dung 1";
        abc = abc.concat(" nội dung 2);
        System.out.println(abc) ;

        ==> lúc này nd in ra sẽ là nội dung 1 nội dung 2



## Các hàm bổ trợ trong chuỗi String:
  - lenght: lấy độ dài ký tự.
      
       String abc= " hoc sinh";
       System.out.println(abc.lenght);
       ===> nó sẽ đếm có 8 ký tự bao gồm khoản trắng.

 - CharArt(): lấy vị trí ký tự mong muốn trong 1 chuỗi
   
        String abc= " hoc sinh";
        char c = abc.CharArt(0);
       System.out.println(c);
       ===> với CharArt(0) tức lấy ký tự ở vtri đâug tiên thì kw hiển thị là chữ "h"
  

  _ concat: hàm nối chuỗi, lưu ý với concat để nối đc chuỗi phải tham chiếu rõ ràng.

         String  abc = "chuỗi 1 " ;
         abc = abc.concat("+ chuỗi 2");
         System.out.println(abc);
         ==> kw sẽ là chuỗi  + chuỗi 2
         ===> // tuy nhiên lưu ý với cách nối chuỗi concat cùng tồn động nhiều hàn chế nên dùng toán tử nối +

 - Compare to: so sánh chuỗi
 - IndexOf(): hàm trả về vị trí tìm kiếm mong muốn
   
    +vd:
             String a = "123456789";
             String search = "2";
             //muốn tiềm kiếm xem ở hàm search có value là 2 nó năm ở vtri nào trên chuỗi lớn a.
             System.out.println("vtri của 2 tren chuỗi a: " + a.indexOf(search));
             ====>indexOf sẽ giúp tiềm xem  hàm search có value 2 năm ở vtri nào trên chuỗi a.
   
  -LastindexOf(): cũng tg tự indexOf tuy nhiên trong chuỗi giả dụ co hơn 2 ký tự trung nhau vậy thì làm sau
  để tk đc ký tự đứng sau, LastindexOf giải quyết vd đó

  - replace: thay thế chuối
      + ví dụ:

         String s1 = " tao là chuỗi s1" ;
         String s2 = "tao là chuỗi s1".replace("tao", "Tôi");
         System.out.println("thayđổi: " + s2);
         ===> ta muốn thay thế chuỗi nào thì chèn chuỗi đó vào và .replace sau đó truyền tham số ký tự cũ thành mới.
    
  - subString(): hàm cắt chuỗi từ vị trí mong muốn, đk từ âu vtri nào tới vtri nào sẽ đc đặt vào ().
      + ví dụ: cắt chuỗi
         
             String u="tôi là người máy";
            u="tôi là người máy".substring(4,12); // vtri can cần truyền vào ()
            System.out.println(u);
            

 - trim: hàm xóa khoản trắng dư thừ của chuỗi(khoản trắng ở đầu và cuối chuỗi nhá).
 - toUppercase( biens in thường thành in hoa)
 - tolowercase(): biến in hoa thành in thường 

     + vd:

            String b =" Hữu phúc ";
            System.out.println(b.trim());
            // biến in hoa thành chữ in thường, cái nào in thường rồi thì giữ nguyên
            System.out.println(b.toLowerCase());
            // biến in thường thành in hoa, chữ nào đg in hoa giữ nguyên
            System.out.println(b.toUpperCase());

 -plit: cắt chuỗi hay đúng hơn là loại bỏ chuỗi thừa mong muốn.
   + ví dụ:
         String h1 ="123456789";
        String [] h2 = h1.split("34");
        for(String h: h2){
            System.out.println(h);
        }
        ====> này tìm hiểu lại sao?






=========================================================================================================

************************************ QUẢN LÝ STRING TRONG JAVA**********************************

- Trong trường hợp số lượng String lớn và nhiều thì nên sử dụng String buider và String buffer.

 >>> Stringbuilder:
   ## Khái niệm:
    - trong Java đại diện cho một chuỗi ký tự có thể thay đổi. Vì Lớp Chuỗi trong Java tạo ra một chuỗi ký tự
    bất biến, nên lớp StringBuilder cung cấp một sự thay thế cho Lớp Chuỗi, vì nó tạo ra một chuỗi ký tự có 
    thể thay đổi. Chức năng của StringBuilder rất giống với lớp StringBuffer, vì cả hai đều cung cấp một sự 
    thay thế cho Lớp chuỗi bằng cách tạo một chuỗi ký tự có thể thay đổi.  

   ## cú pháp:

      StringBuilder var_name = new StringBuilder()
      var_name.append=(nội dung chuỗi);
      // p/t append sẽ nói bên dưới


 >>> StringBuffer:
  ## Khái niệm:
   - là một lớp ngang hàng của String cung cấp nhiều chức năng của chuỗi. Chuỗi đại diện cho các chuỗi ký tự 
   có độ dài cố định, không thể thay đổi trong khi StringBuffer đại diện cho các chuỗi ký tự có thể phát triển 
   và có thể ghi.
   - được sử dụng để tạo chuỗi có thể thay đổi (modifiable). Lớp StringBuffer trong java cũng giống như lớp 
   String ngoại trừ nó có thể thay đổi được.

   ## cấu trúc:

        StringBuffer var_name = new StringBuffer();





 >>> Phần biệt điểm khác và giống của StringBuffer & StringBuilder
  
                       StringBuffer                                   StringBuilder


giống nhau       - Giá trị lớp chuỗi thay thế đc                 - Giá trị chuỗi có thể thay đổi

                      ----------------------------------------------------------------

khác nhau        - Đồng bộ hóa đc                                - Không đồng bộ hóa
                 - Tính an toàn cao                              - Tính an toàn thấp hơn 
                 _ quản lý không gian bộ nhớ bt.                 - quản lý không gian bộ nhớ tốt hơn, nhanh hơn
                 
                ===> trong lập trình sẽ ưu tiên dùng StringBuilder
                ====> tagt thấy dùng StringBuffer và StringBuilder nó sẽ giảm tải bộ nhớ heap của máy tính nhiều hơn,. và quá trình
                khai báo cũng gọn không cần khai báo nhiều biến chứa như String thông thường
                  
                    Ví dụ:
                      vois String bt đế nối chũi

                          String S = "tôi là a";
                          S= S + "và bạn của b";
                          ===> tốn thêm bộ nhớ heap cho mỗi lần lỗi biến S ra


                       Với Stringbuilder vad StringBuffer thì không cần chỉ cần sử dụng phương thức kết nối là xong:
                        StringBuffer a = new StringBuffer();
                        a.append(và là bạn của b);   





>>> Phương thức kết hợp của StringBuffer, StringBuilder

 ## Append(): nối đối số đã cho với chuỗi này.
    + vd:

                    class A {
                            public static void main(String args[])
                            {
                                StringBuffer sb = new StringBuffer("Hello ");
                                sb.append("Java"); // now original string is changed
                                System.out.println(sb);
                            }
                        }
                        ===> kw sẽ in ra dòng Hello Java


 ## Phương thức Insert(): Phương thức insert () chèn chuỗi đã cho với chuỗi này ở vị trí đã cho. 
  + vd:

        StringBuffer sb = new StringBuffer("Hello ");
            sb.insert(1, "Java");
            System.out.println(sb.toString());
            //===> lúc này ở vtri 1 sẽ chèn chữ java vào vtri 1 Hello thành  HJavaello


 ## Phương thức Replace(): Phương thức Replace () thay thế chuỗi đã cho từ beginIndex và endIndex-1 được chỉ định.
  + ví dụ:

            StringBuffer sb=new StringBuffer("Hello");
            sb.replace(1,3,"Java"); // replace(điểm bắt đầu, điểm kết thức cho vị trí chèn, "nội dung thay thế")
            System.out.println(sb);
            ===> kw in ra HJavaello

        
 ## Phương thức delete(): Phương thức delete () của lớp StringBuffer xóa chuỗi từ beginIndex được chỉ định đến endIndex-1.
   + ví dụ:
    
        StringBuilder a = new StringBuilder("Hello");
        System.out.println(a.delete(1,3));          // delete(điểm bắt đầu xóa, điểm kt xóa)
        ==> kw Hlo


## Phương thức Reserve(): đảo chuổi trong StringBuilder, StringBuffer

  + ví dụ:
       StringBuffer a = new StringBuffer("Hữu Phúc");
        System.out.println(a.reverse());

## Note: một số hàm phương thức còn lại có thể tự tiềm hiểu thêm, nó bao gồm nhiều phg thức trong chuỗi String
: CharArt, IndexOf, LastindexOf........... sử dụng tùy theo ngữ cảnh, yêu cầu từ kinh nghiệm thực tiễn sẽ tự bổ sugn thêm.
                    
        
      